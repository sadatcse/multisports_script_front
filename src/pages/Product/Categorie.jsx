import React, { useState, useEffect, useCallback } from 'react';
import Swal from 'sweetalert2';
import { HiOutlineHome, HiPencil, HiTrash, HiPlus } from 'react-icons/hi';

// Assuming these components are in your project structure as provided
import UseAxiosSecure from '../../Hook/UseAxioSecure'; 
import SkeletonLoader from '../../components library/SkeletonLoader';
import TableControls from '../../components/TableControls'; 
import Pagination from '../../components/Pagination';

// --- Category Modal Component ---
// This modal is used for both creating a new category and editing an existing one.
const CategoryModal = ({ isOpen, onClose, onSave, category, setCategory, isLoading }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
            <div className="bg-white p-6 rounded-2xl shadow-xl w-full max-w-md transform transition-all">
                <h2 className="text-2xl font-bold mb-6 text-gray-800">{category._id ? 'Edit Category' : 'Add New Category'}</h2>
                
                <div className="space-y-4">
                    <input
                        type="text"
                        value={category.name || ''}
                        onChange={(e) => setCategory({ ...category, name: e.target.value })}
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Category Name"
                    />
                    {/* The serial number is auto-generated by the backend, so no input is needed here. */}
                </div>

                <div className="flex justify-end space-x-4 mt-8">
                    <button
                        onClick={onClose}
                        className="px-6 py-2 font-semibold text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors"
                    >
                        Cancel
                    </button>
                    <button
                        onClick={onSave}
                        className={`px-6 py-2 font-semibold text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors flex items-center ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                        disabled={isLoading}
                    >
                        {isLoading ? 'Saving...' : 'Save Category'}
                    </button>
                </div>
            </div>
        </div>
    );
};


// --- Main Categories Component ---
// This is the primary component for managing categories.
const Categories = () => {
    const axiosSecure = UseAxiosSecure();

    // State for data, pagination, loading, search, and modal
    const [categories, setCategories] = useState([]);
    const [pagination, setPagination] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(10);

    // State for the modal
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    const [currentCategory, setCurrentCategory] = useState(null);

    const initialFormState = {
        name: "",
    };

    // Memoized function to fetch categories from the API using pagination and search
    const fetchCategories = useCallback(async (page, limit, search) => {
        setLoading(true);
        setError(null);
        try {
            // The backend endpoint now accepts query parameters for pagination and search
            const response = await axiosSecure.get('/categories', {
                params: { page, limit, search }
            });
            setCategories(response.data.data);
            setPagination(response.data.pagination);
        } catch (err) {
            setError('Failed to fetch categories. Please ensure the backend server is running.');
            console.error(err);
        } finally {
            setLoading(false);
        }
    }, [axiosSecure]);

    // useEffect to fetch categories with debouncing for search input
    useEffect(() => {
        const handler = setTimeout(() => {
            fetchCategories(currentPage, itemsPerPage, searchTerm);
        }, 500); // Debounce search requests by 500ms to avoid excessive API calls
        return () => clearTimeout(handler);
    }, [searchTerm, currentPage, itemsPerPage, fetchCategories]);

    // --- Modal and CRUD Handlers ---

    const handleOpenModal = (category = null) => {
        setCurrentCategory(category ? { ...category } : { ...initialFormState });
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setCurrentCategory(null);
    };
    
    const handleSaveCategory = async () => {
        if (!currentCategory?.name?.trim()) {
            Swal.fire('Validation Error', 'Category name is required.', 'error');
            return;
        }

        setIsSaving(true);
        try {
            if (currentCategory._id) {
                // Update existing category
                await axiosSecure.put(`/categories/update/${currentCategory._id}`, { name: currentCategory.name });
            } else {
                // Add new category
                await axiosSecure.post('/categories/post', { name: currentCategory.name });
            }
            Swal.fire('Success!', `Category has been ${currentCategory._id ? 'updated' : 'added'}.`, 'success');
            handleCloseModal();
            fetchCategories(currentPage, itemsPerPage, searchTerm); // Refetch data to show the latest changes
        } catch (error) {
            console.error('Error saving category:', error);
            const errorMessage = error.response?.data?.message || 'Failed to save category. Please try again.';
            Swal.fire('Error!', errorMessage, 'error');
        } finally {
            setIsSaving(false);
        }
    };

    const handleDelete = (categoryId) => {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    await axiosSecure.delete(`/categories/delete/${categoryId}`);
                    Swal.fire('Deleted!', 'The category has been deleted.', 'success');
                    fetchCategories(currentPage, itemsPerPage, searchTerm); // Refetch data
                } catch (error) {
                    console.error('Error deleting category:', error);
                    Swal.fire('Error!', 'Failed to delete category.', 'error');
                }
            }
        });
    };

    // --- Pagination and Search Handlers ---
    const handlePageChange = (newPage) => {
        if (newPage > 0 && newPage <= (pagination?.totalPages || 1)) {
            setCurrentPage(newPage);
        }
    };

    const handleSearchChange = (event) => {
        setSearchTerm(event.target.value);
        setCurrentPage(1); // Reset to the first page on a new search
    };

    const handleItemsPerPageChange = (event) => {
        setItemsPerPage(Number(event.target.value));
        setCurrentPage(1); // Reset to the first page when changing items per page
    };

    return (
        <div className="container mx-auto p-4 sm:p-6 lg:p-8">
            {/* Breadcrumbs */}
            <div className="py-6">
                <div className="flex items-center text-sm text-gray-500">
                    <HiOutlineHome className="h-5 w-5 mr-2" />
                    <span>Home / Category Management</span>
                </div>
            </div>

            {/* Main Content Card */}
            <div className="bg-white shadow-md rounded-lg p-4 md:p-6">
                <div className="flex flex-col md:flex-row justify-between items-center mb-4">
                    {/* Table Controls for Search and Items Per Page */}
                    <div className="w-full md:w-auto">
                        <TableControls
                            itemsPerPage={itemsPerPage}
                            onItemsPerPageChange={handleItemsPerPageChange}
                            searchTerm={searchTerm}
                            onSearchChange={handleSearchChange}
                        />
                    </div>
                    {/* Add New Category Button */}
                    <button
                        onClick={() => handleOpenModal()}
                        className="mt-4 md:mt-0 flex items-center gap-2 bg-blue-600 text-white py-2 px-4 rounded-lg shadow hover:bg-blue-700 transition duration-300"
                    >
                        <HiPlus className="w-5 h-5" />
                        <span>Add New Category</span>
                    </button>
                </div>

                {error && <div className="text-red-500 text-center p-4 bg-red-100 rounded-md">{error}</div>}

                {/* Categories Table */}
                <div className="overflow-x-auto">
                    <table className="w-full text-sm text-left rtl:text-right text-gray-500">
                        <thead className="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th scope="col" className="px-6 py-3 w-24">Serial</th>
                                <th scope="col" className="px-6 py-3">Category Name</th>
                                <th scope="col" className="px-6 py-3 text-right">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                <SkeletonLoader columns={3} />
                            ) : (
                                categories.map(category => (
                                    <tr key={category._id} className="bg-white border-b hover:bg-gray-50">
                                        <td className="px-6 py-4 font-medium text-gray-900">{category.serial}</td>
                                        <td className="px-6 py-4 text-base">{category.name}</td>
                                        <td className="px-6 py-4">
                                            <div className="flex items-center justify-end space-x-2">
                                                <button onClick={() => handleOpenModal(category)} className="p-2 text-blue-600 hover:bg-blue-100 rounded-full transition-colors duration-200">
                                                    <HiPencil className="w-5 h-5" />
                                                </button>
                                                <button onClick={() => handleDelete(category._id)} className="p-2 text-red-600 hover:bg-red-100 rounded-full transition-colors duration-200">
                                                    <HiTrash className="w-5 h-5" />
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            )}
                        </tbody>
                    </table>
                </div>

                {/* Message for when no data is found */}
                {!loading && categories.length === 0 && !error && (
                    <div className="text-center py-8 text-gray-500">No categories found.</div>
                )}

                {/* Pagination Controls */}
                {!loading && pagination && pagination.totalPages > 0 && (
                    <Pagination
                        currentPage={currentPage}
                        totalPages={pagination.totalPages}
                        totalItems={pagination.totalItems}
                        itemsPerPage={itemsPerPage}
                        onPageChange={handlePageChange}
                    />
                )}
            </div>

            {/* Modal for Add/Edit Category */}
            {isModalOpen && (
                 <CategoryModal
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    onSave={handleSaveCategory}
                    category={currentCategory}
                    setCategory={setCurrentCategory}
                    isLoading={isSaving}
                />
            )}
        </div>
    );
};

export default Categories;
